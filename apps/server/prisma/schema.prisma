generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [postgis]
}

// generator typegraphql {
//   provider = "typegraphql-prisma"
//   output   = "../src/generated/type-graphql"
// }

enum Role {
  ADMIN
  MANAGER
  USER
}

enum VerificationStatus {
  VERIFIED
  UNVERIFIED
  VERIFICATION_IN_PROGRESS
}

model Verification {
  id     String             @id @default(cuid())
  status VerificationStatus
  userId String
  user   User?              @relation(name: "UserVerification")
}

model User {
  id    String @id @default(cuid())
  phone String @unique

  pushId String?
  role   Role?   @default(USER)

  verificationId String?       @unique
  verification   Verification? @relation(name: "UserVerification", fields: [verificationId], references: [id])

  name         String?
  photo        String?
  categoryIds String[] // ProfileCategory

  messages      Message[]      @relation(name: "UserMessages")
  conversations Conversation[] @relation(name: "UserConversations")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  text      String
  taskId String
  // target user id to give review for, not profile
  targetUserId    String
  stars     Int
  authorId  String
  images    String[]
}

model UserFavories {
  userId    String @id
  taskId String
  createdAt DateTime @default(now())
}

enum ActivityType {
  SERVICE_STATUS_CHANGED
  REVIEW_RECEIVED
  AUTHENTICATED
}

model Activity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  text      String
  type      ActivityType
  authorId  String
  modelType String?
  modelId   String?
}

model Otp {
  id        String   @id @default(cuid())
  phone     String   @unique
  pin       String
  createdAt DateTime @default(now())
  expiredAt DateTime
}

model Conversation {
  id                 String    @id @default(cuid())
  createdAt          DateTime  @default(now())
  members            User[]    @relation(name: "UserConversations")
  messages           Message[] @relation(name: "ConversationMessages")
  lastMessageContent String?
  lastMessageDate    DateTime?
  lastMessageAuthor  String?
}

model UserCategory {
  categoryId  String
  userId   String
  price       Int?
  description String?

  @@id([userId, categoryId])
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  image       String?
  parentId    String?
}

enum TaskStatus {
  CREATED
  IN_PROGRESS
  AWAITING_REVIEW
  FINISHED
}

enum TaskPaymentType {
  FIXED
  FLEXIBLE
  NEGOTIATABLE
  HOURLY
}

enum TaskPayment {
  CASH
  BANK_TRANSFER
  APPLE_PAY
}

enum TaskState {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Task {
  id          String        @id @default(cuid())
  createdAt   DateTime      @default(now())
  title       String
  description String
  price       Int?
  paymentType TaskPaymentType? @default(FIXED)
  payment     TaskPayment? @default(CASH)
  date        DateTime?
  status      TaskStatus @default(CREATED)
  state       TaskState @default(DRAFT)
  address     String?
  images      String[]
  authorId    String
  executorId  String? // person who completes the job
  categoryId  String?
}

model TaskLocation {
  id          String        @id @default(cuid())
  task      String
  altitude  Float
  location    Unsupported("geography(Point, 4326)")
}

model Message {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  content        String
  authorId       String
  author         User         @relation(name: "UserMessages", references: [id], fields: [authorId])
  readByIds      String[]
  receivedByIds  String[]
  files          String[]
  conversationId String
  conversation   Conversation @relation(name: "ConversationMessages", references: [id], fields: [conversationId])
}


// todo: remove File model, all assets should be stored in s3
model File {
  id         String    @id @default(cuid())
  name       String
  size       Int
  path       String
  type       String
}
